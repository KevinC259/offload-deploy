import{g as z,a as B,u as G}from"./module-CucKkFkR.js";import{P as $}from"./ParamList-33aMWWOn.js";import{d as H,r as x,L as M,M as J,G as K,c as V,a as c,z as Q,b as L,t as T,w as b,f as E,u as W,E as u,k as D,F as X,n as Y,i as Z,g as ee,I as oe,o as _,N as le,_ as te}from"./index-CSkJ4Wth.js";import{M as ne}from"./moduleConfig-DmJXzrbK.js";import"./request-Bb7olHYx.js";import"./index-xsH4HHeE.js";import"./auth-CnjZ6pwZ.js";const se={class:"lightning-model-view"},ae={class:"card algorithm-selection-section"},ie={class:"card-header"},re={class:"card-title"},ce={class:"card-description"},de={class:"form-group"},ge={style:{flex:"1"}},ue={key:0,class:"card algorithm-params-section"},me={class:"card-header"},pe={class:"card-title"},fe={key:0,class:"params-container"},he={class:"form-actions"},ve={key:1,class:"no-params"},_e=H({__name:"LightningModelView",setup(ye){const d=ee(),I=oe(),k=x(null),O=ne.LIGHTNING_MODEL,g=M({name:"LightningModel",label:"LightningModel",description:"LightningModel方法及其参数设置",algorithmVos:[]}),i=x(""),r=J(()=>g.algorithmVos.find(o=>o.id===i.value)||null),f=M({}),s=M({}),A=s,m=M({}),N=async()=>{try{console.log("正在加载LightningModel算法列表，模块ID:",O);const o=await z({id:O});console.log("LightningModel算法列表API响应:",o),g.algorithmVos=(o||[]).map(e=>({id:e.id,name:e.name,label:e.label,paramVos:[]})),console.log("处理后的LightningModel算法列表:",g.algorithmVos),g.algorithmVos.length>0?(i.value=g.algorithmVos[0].id,console.log("选择的LightningModel算法ID:",i.value),await S(i.value)):(console.log("没有找到LightningModel算法列表"),u.warning("该模块下暂无算法配置"))}catch(o){u.error("获取LightningModel算法列表失败"),console.error("获取LightningModel算法列表失败:",o)}},S=async o=>{try{console.log("正在加载LightningModel算法参数，算法ID:",o);const e=await B({id:o});console.log("LightningModel参数列表API响应:",e);const a=(e||[]).map(n=>({id:n.id,name:n.name,label:n.label,value:n.value,paramType:n.type,paramDefault:n.defaultValue,paramOption:n.options?n.options.join(","):null,minValue:n.minValue,maxValue:n.maxValue,ref:null}));console.log("处理后的LightningModel参数列表:",a);const l=g.algorithmVos.find(n=>n.id===o);l&&(l.paramVos=a,j(l),console.log("LightningModel算法参数已更新，参数数量:",a.length))}catch(e){u.error("获取LightningModel算法参数失败"),console.error("获取LightningModel算法参数失败:",e)}},j=o=>{Object.keys(f).forEach(e=>delete f[e]),Object.keys(s).forEach(e=>delete s[e]),Object.keys(m).forEach(e=>delete m[e]),o&&o.paramVos.length>0&&o.paramVos.forEach(e=>{let a;e.paramType==="bool"?a=e.value==="true":e.paramType==="int"||e.paramType==="float"?a=Number(e.value):a=e.value,f[e.name]=a,s[e.name]=a,e.ref&&(m[e.name]=e.ref??"")})},w=async()=>{i.value&&await S(i.value)};K(()=>{N()});const F=o=>{console.log("=== LightningModel父组件接收到表单更新 ==="),console.log("新的表单数据:",o),console.log("更新前的 tempForm:",{...s}),Object.keys(s).forEach(e=>delete s[e]),Object.assign(s,o),console.log("更新后的 tempForm:",{...s}),console.log("=== LightningModel表单更新完成 ===")},R=o=>{console.log("=== LightningModel父组件接收到引用更新 ==="),console.log("新的引用数据:",o),Object.keys(m).forEach(e=>delete m[e]),Object.assign(m,o),console.log("更新后的 formRefs:",{...m}),console.log("=== LightningModel引用更新完成 ===")},C=async()=>{var o,e,a;if(console.log("=== 开始保存LightningModel参数 ==="),console.log("当前选择的算法ID:",i.value),console.log("当前算法对象:",r.value),!r.value||r.value.paramVos.length===0){u.success("当前算法无参数需要保存");return}k.value&&(console.log("调用 commitLocalData 前的 tempForm:",{...s}),k.value.commitLocalData(),console.log("调用 commitLocalData 后的 tempForm:",{...s})),await le(),console.log("验证前的最终 tempForm 数据:",s);for(const l of r.value.paramVos){const n=s[l.name];if(console.log(`验证LightningModel参数 ${l.name}:`,n,"类型:",typeof n),(l.paramType==="int"||l.paramType==="float")&&(n==null||n===""||Number(n)<=0)){u.error(`${l.label} 必须为正数`);return}if(l.minValue!==null&&Number(n)<l.minValue){u.error(`${l.label} 不能小于 ${l.minValue}`);return}}try{console.log("开始保存LightningModel参数到数据库...");const l=r.value.paramVos.map(t=>{const v=s[t.name];let y;t.paramType==="bool"||t.paramType==="int"||t.paramType,y=String(v);const q={id:t.id,algorithmId:i.value,name:t.name,label:t.label,value:y,paramType:t.paramType,paramDefault:t.paramDefault||"",paramOption:t.paramOption||"",minValue:t.minValue?String(t.minValue):"",maxValue:t.maxValue?String(t.maxValue):"",type:"edit"};return console.log("准备更新LightningModel参数:",t.name,"值:",y),G(q,{silent:!0})}),p=(await Promise.allSettled(l)).filter(t=>t.status==="rejected");if(p.length>0)throw p[0].reason;console.log("所有LightningModel参数保存成功"),r.value&&r.value.paramVos&&r.value.paramVos.forEach(t=>{const v=s[t.name];t.paramType==="bool"||t.paramType==="int"||t.paramType,t.value=String(v),f[t.name]=s[t.name]}),u.success("所有参数保存成功");const h=I.query.from;h&&(console.log("从页面跳转而来:",h,"返回策略ID:",i.value),h==="predictor"?d.push({name:"nav_predictor",query:{lightningModelStrategyId:i.value}}):h==="nav_predictor"?d.push({name:"nav_predictor",query:{lightningModelStrategyId:i.value}}):h==="optimizeAlgorithm"||h==="nav_optimizeAlgorithm"?d.push({name:h,query:{lightningModelStrategyId:i.value}}):d.back())}catch(l){console.error("LightningModel参数保存失败，详细错误:",l),console.error("错误响应:",l==null?void 0:l.response),console.error("错误数据:",(o=l==null?void 0:l.response)==null?void 0:o.data),u.error(`参数保存失败: ${((a=(e=l==null?void 0:l.response)==null?void 0:e.data)==null?void 0:a.message)||(l==null?void 0:l.message)||"未知错误"}`)}},P=()=>{console.log("重置闪电模型参数到原始值"),console.log("原始表单数据:",f),Object.keys(s).forEach(o=>delete s[o]),Object.keys(f).forEach(o=>{s[o]=f[o]}),console.log("重置后的临时表单数据:",s),u.success("参数已重置")},U=()=>{const o=I.query.from;o?(console.log("返回到调用页面:",o),o==="predictor"?d.push({name:"nav_predictor"}):o==="nav_predictor"?d.push({name:"nav_predictor"}):o==="optimizeAlgorithm"||o==="nav_optimizeAlgorithm"?d.push({name:o}):d.back()):d.back()};return(o,e)=>{const a=E("el-button"),l=E("el-option"),n=E("el-select");return _(),V("div",se,[c("div",ae,[c("div",ie,[c("span",re,T(g.label),1),L(a,{class:"back-button",type:"info",onClick:U},{default:b(()=>e[1]||(e[1]=[D("返回")])),_:1})]),c("span",ce,T(g.description),1),c("div",de,[e[2]||(e[2]=c("label",null,"选择算法",-1)),c("div",ge,[L(n,{modelValue:i.value,"onUpdate:modelValue":e[0]||(e[0]=p=>i.value=p),placeholder:"请选择算法",onChange:w},{default:b(()=>[(_(!0),V(X,null,Y(g.algorithmVos,p=>(_(),Z(l,{key:p.id,label:p.name,value:p.id},null,8,["label","value"]))),128))]),_:1},8,["modelValue"])])])]),r.value?(_(),V("div",ue,[c("div",me,[c("span",pe,"算法："+T(r.value.name),1)]),r.value.paramVos.length>0?(_(),V("div",fe,[L($,{ref_key:"paramListRef",ref:k,params:r.value.paramVos,"model-value":W(A),refs:m,"onUpdate:modelValue":F,"onUpdate:refs":R},null,8,["params","model-value","refs"]),c("div",he,[L(a,{type:"primary",onClick:C},{default:b(()=>e[3]||(e[3]=[D("保存")])),_:1}),L(a,{onClick:P},{default:b(()=>e[4]||(e[4]=[D("重置")])),_:1})])])):(_(),V("div",ve,"该算法暂无参数设置"))])):Q("",!0)])}}}),De=te(_e,[["__scopeId","data-v-2559c13a"]]);export{De as default};
