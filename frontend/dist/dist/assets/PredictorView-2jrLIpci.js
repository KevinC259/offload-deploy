import{g as U,a as le,b as A,u as ae}from"./module-CucKkFkR.js";import{P as se}from"./ParamList-33aMWWOn.js";import{d as ie,M as J,I as re,r as R,L as w,x as ce,G as ge,g as de,c as V,z as T,a as p,b as y,w as h,f as j,t as I,u as ue,E as g,k as S,F as me,n as fe,i as pe,o as b,N as ye,_ as ve}from"./index-CSkJ4Wth.js";import{M as $}from"./moduleConfig-DmJXzrbK.js";import"./request-Bb7olHYx.js";import"./index-xsH4HHeE.js";import"./auth-CnjZ6pwZ.js";const he={class:"optimize-algorithm-view"},_e={key:0,class:"global-actions"},Se={class:"card algorithm-selection-section"},be={class:"card-title"},Le={class:"card-description"},Me={class:"form-group"},Ve={style:{flex:"1"}},Oe={key:0,class:"form-group lightning-strategy-display"},we={class:"strategy-value"},Ie={key:1,class:"card algorithm-params-section"},Ne={class:"card-header"},ke={class:"card-title"},Ce={class:"header-buttons"},De={key:0,class:"params-container"},Re={class:"form-actions"},Te={key:1,class:"no-params"},je=ie({__name:"PredictorView",setup(Ee){const L=de(),m=re(),N=J(()=>m.name==="nav_predictor"),k=R(null),E=$.PREDICTOR,c=R(null),v=w({name:"Predictor",label:"预测器",description:"预测器方法及其参数设置",algorithmVos:[]}),i=R(""),f=J(()=>v.algorithmVos.find(o=>o.id===i.value)||null),M=w({}),s=w({}),C=s,_=w({}),x=async o=>{console.log("获取 LightningModel 策略名称，策略ID:",o);try{const e=await U({id:$.LIGHTNING_MODEL});if(console.log("LightningModel 算法列表响应:",e),e&&e.length>0){const t=e.find(l=>l.id===o);return console.log("找到的 LightningModel 策略:",t),t?t.name:(console.warn("未找到对应的 LightningModel 策略，策略ID:",o),null)}else return console.warn("LightningModel 算法列表为空"),null}catch(e){return console.error("获取 LightningModel 策略名称失败:",e),console.error("错误响应:",e==null?void 0:e.response),console.error("错误本身:",e),null}},z=async()=>{try{console.log("正在加载预测器算法列表，模块ID:",E);const o=await U({id:E});console.log("预测器算法列表API响应:",o),v.algorithmVos=(o||[]).map(e=>({id:e.id,name:e.name,label:e.label,paramVos:[]})),console.log("处理后的预测器算法列表:",v.algorithmVos),v.algorithmVos.length>0?(i.value=v.algorithmVos[0].id,console.log("选择的预测器算法ID:",i.value),await P(i.value)):(console.log("没有找到预测器算法列表"),g.warning("该模块下暂无算法配置"))}catch(o){g.error("获取预测器算法列表失败"),console.error("获取预测器算法列表失败:",o)}},P=async o=>{try{console.log("正在加载预测器算法参数，算法ID:",o);const e=await le({id:o});console.log("预测器参数列表API响应:",e);const t=(e||[]).map(a=>({id:a.id,name:a.name,label:a.label,value:a.value,paramType:a.type==="str"?"string":a.type,paramDefault:a.defaultValue,paramOption:a.options?a.options.join(","):null,minValue:a.minValue,maxValue:a.maxValue,ref:null}));console.log("处理后的预测器参数列表:",t);const l=v.algorithmVos.find(a=>a.id===o);l&&(l.paramVos=t,F(l),console.log("预测器算法参数已更新，参数数量:",t.length))}catch(e){g.error("获取预测器算法参数失败"),console.error("获取预测器算法参数失败:",e)}},F=o=>{Object.keys(M).forEach(e=>delete M[e]),Object.keys(s).forEach(e=>delete s[e]),Object.keys(_).forEach(e=>delete _[e]),o&&o.paramVos.length>0&&o.paramVos.forEach(e=>{let t;e.paramType==="bool"?t=e.value==="true":e.paramType==="int"||e.paramType==="float"?t=Number(e.value):(e.paramType,t=e.value),M[e.name]=t,s[e.name]=t,e.ref&&(_[e.name]=e.ref??"")})},B=async()=>{i.value&&await P(i.value)};ce(()=>m.query.lightningModelStrategyId,async o=>{if(console.log("路由监听器触发，lightningModelStrategyId 变化:",o),o&&typeof o=="string"){console.log("开始处理新的 lightningModelStrategyId:",o);const e=await x(o);console.log("路由监听器获取到的策略名称:",e),e?(c.value={id:o,name:e},console.log("路由监听器更新后的 selectedLightningModelStrategy.value:",c.value),localStorage.setItem("selectedLightningModelStrategy",JSON.stringify(c.value)),console.log("路由监听器已保存 LightningModel 策略到 localStorage"),L.replace({name:m.name,query:{...m.query,lightningModelStrategyId:void 0}}),console.log("路由监听器已清除路由参数 lightningModelStrategyId")):console.error("路由监听器无法获取 LightningModel 策略名称")}});const q=()=>{N.value?L.push({name:"nav_optimizeAlgorithm"}):L.back()},D=async()=>{try{const o=`predictor_${String(m.name)}`,e={selectedAlgorithm:i.value,form:{...C},selectedLightningModelStrategy:c.value,timestamp:new Date().toISOString(),routeName:m.name};localStorage.setItem(o,JSON.stringify(e))}catch(o){console.error("保存配置失败:",o),g.error("保存配置失败")}},K=async()=>{try{const o={predictor:{selectedAlgorithm:i.value,form:{...s},selectedLightningModelStrategy:c.value,timestamp:new Date().toISOString(),stepName:"预测器配置"}},e=["nav_dataSource","nav_globalParam","nav_inputModule","nav_modulePanel","nav_optimizeVariables","nav_optimizationTargets","nav_optimizeAlgorithm","nav_surrogate","nav_robustnessAnalysis"];for(const n of e){const d=localStorage.getItem(n);if(d)try{const r=n.replace("nav_","");o[r]=JSON.parse(d)}catch(r){console.warn(`解析配置 ${n} 失败:`,r)}}const t=new Blob([JSON.stringify(o,null,2)],{type:"application/json"}),l=URL.createObjectURL(t),a=document.createElement("a");a.href=l;const u=new Date().toISOString().replace(/[:.]/g,"-");a.download=`training_config_${u}.json`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(l),console.log("完整训练配置已导出")}catch(o){throw console.error("导出配置失败:",o),o}},G=async()=>{try{const o={predictor:{selectedAlgorithm:i.value,form:{...s},selectedLightningModelStrategy:c.value,timestamp:new Date().toISOString(),stepName:"预测器配置"}},e=["nav_dataSource","nav_globalParam","nav_inputModule","nav_modulePanel","nav_optimizeVariables","nav_optimizationTargets","nav_optimizeAlgorithm","nav_surrogate","nav_robustnessAnalysis"];for(const d of e){const r=localStorage.getItem(d);if(r)try{const O=d.replace("nav_","");o[O]=JSON.parse(r)}catch(O){console.warn(`解析配置 ${d} 失败:`,O)}}const t="training_complete_config";localStorage.setItem(t,JSON.stringify(o));const l=new Blob([JSON.stringify(o,null,2)],{type:"application/json"}),n={fileName:`training_config_${new Date().toISOString().replace(/[:.]/g,"-")}.json`,timestamp:new Date().toISOString(),size:l.size,configKey:t};return localStorage.setItem("training_config_file_info",JSON.stringify(n)),console.log("配置已保存到localStorage"),console.log("配置数据大小:",l.size,"bytes"),n}catch(o){throw console.error("保存配置到localStorage失败:",o),o}},H=async()=>{var o;try{if(g.info("正在准备训练配置..."),!i.value){g.warning("请先选择算法");return}await D(),await G();const e=((o=c.value)==null?void 0:o.id)||"";console.log("开始训练时导出配置，使用的 subid:",e);const t=await A({id:i.value,subid:e,currentid:"003"}),l="predictor_export_config",a={data:t,algorithmId:i.value,subid:e,timestamp:new Date().toISOString(),fileName:`predictor_config_${i.value}_${Date.now()}.json`};localStorage.setItem(l,JSON.stringify(a)),console.log("预测器导出配置已保存到localStorage:",a);const u=JSON.stringify(t,null,4),n=new Blob([u],{type:"application/json"}),d=URL.createObjectURL(n),r=document.createElement("a");r.href=d,r.download=a.fileName,r.style.display="none",document.body.appendChild(r),r.click(),document.body.removeChild(r),URL.revokeObjectURL(d),g.success({message:"配置文件已导出并保存，正在跳转到训练页面",duration:3e3}),L.push({name:"nav_trainingResult"})}catch(e){console.error("跳转到训练结果页面失败:",e),g.error("操作失败，请重试")}},Q=async()=>{try{await D(),await K(),g.success("配置已保存并导出，配置流程已完成"),L.push({name:"nav_configuration"})}catch(o){console.error("完成配置操作失败:",o),g.error("操作失败，请重试")}},W=()=>{if(N.value)try{const o=`predictor_${String(m.name)}`,e=localStorage.getItem(o);if(e){const t=JSON.parse(e);i.value=t.selectedAlgorithm,Object.assign(C,t.form),c.value=t.selectedLightningModelStrategy}}catch(o){console.error("加载配置失败:",o)}};ge(async()=>{console.log("PredictorView 组件挂载"),console.log("当前路由:",m),console.log("路由查询参数:",m.query),W(),await z();const o=localStorage.getItem("selectedLightningModelStrategy");if(console.log("从 localStorage 加载的 LightningModel 策略:",o),o)try{c.value=JSON.parse(o),console.log("成功加载 LightningModel 策略:",c.value)}catch(t){console.error("解析 LightningModel 策略数据失败:",t),c.value=null}console.log("组件挂载后 selectedLightningModelStrategy.value:",c.value);const e=m.query.lightningModelStrategyId;if(console.log("路由参数中的 lightningModelStrategyId:",e),e){console.log("检测到 lightningModelStrategyId，开始处理:",e);const t=await x(e);console.log("获取到的策略名称:",t),t?(c.value={id:e,name:t},console.log("更新后的 selectedLightningModelStrategy.value:",c.value),localStorage.setItem("selectedLightningModelStrategy",JSON.stringify(c.value)),console.log("已保存 LightningModel 策略到 localStorage"),L.replace({name:m.name,query:{...m.query,lightningModelStrategyId:void 0}}),console.log("已清除路由参数 lightningModelStrategyId")):console.error("无法获取 LightningModel 策略名称")}});const X=o=>{console.log("=== 预测器父组件接收到表单更新 ==="),console.log("新的表单数据:",o),console.log("更新前的 tempForm:",{...s}),Object.keys(s).forEach(e=>delete s[e]),Object.assign(s,o),console.log("更新后的 tempForm:",{...s}),console.log("=== 预测器表单更新完成 ===")},Y=o=>{console.log("=== 预测器父组件接收到引用更新 ==="),console.log("新的引用数据:",o),Object.keys(_).forEach(e=>delete _[e]),Object.assign(_,o),console.log("更新后的 formRefs:",{..._}),console.log("=== 预测器引用更新完成 ===")},Z=async()=>{var o,e,t;if(console.log("=== 开始保存预测器参数 ==="),console.log("当前选择的算法ID:",i.value),console.log("当前算法对象:",f.value),!f.value||f.value.paramVos.length===0){g.success("当前算法无参数需要保存");return}k.value&&(console.log("调用 commitLocalData 前的 tempForm:",{...s}),k.value.commitLocalData(),console.log("调用 commitLocalData 后的 tempForm:",{...s})),await ye(),console.log("验证前的最终 tempForm 数据:",s);for(const l of f.value.paramVos){const a=s[l.name];if(console.log(`验证预测器参数 ${l.name}:`,a,"类型:",typeof a),(l.paramType==="int"||l.paramType==="float")&&(a==null||a===""||Number(a)<=0)){g.error(`${l.label} 必须为正数`);return}if(l.minValue!==null&&Number(a)<l.minValue){g.error(`${l.label} 不能小于 ${l.minValue}`);return}}try{console.log("开始保存预测器参数到数据库...");const l=f.value.paramVos.map(n=>{const d=s[n.name];let r;n.paramType==="bool"||n.paramType==="int"||n.paramType,r=String(d);const O={id:n.id,algorithmId:i.value,name:n.name,label:n.label,value:r,paramType:n.paramType,paramDefault:n.paramDefault||"",paramOption:n.paramOption||"",minValue:n.minValue?String(n.minValue):"",maxValue:n.maxValue?String(n.maxValue):"",type:"edit"};return console.log("准备更新预测器参数:",n.name,"值:",r),ae(O,{silent:!0})}),u=(await Promise.allSettled(l)).filter(n=>n.status==="rejected");if(u.length>0)throw u[0].reason;console.log("所有预测器参数保存成功"),f.value&&f.value.paramVos&&f.value.paramVos.forEach(n=>{const d=s[n.name];n.paramType==="bool"||n.paramType==="int"||n.paramType,n.value=String(d),M[n.name]=s[n.name]}),g.success("所有参数保存成功")}catch(l){console.error("预测器参数保存失败，详细错误:",l),console.error("错误响应:",l==null?void 0:l.response),console.error("错误数据:",(o=l==null?void 0:l.response)==null?void 0:o.data),g.error(`参数保存失败: ${((t=(e=l==null?void 0:l.response)==null?void 0:e.data)==null?void 0:t.message)||(l==null?void 0:l.message)||"未知错误"}`)}},ee=()=>{console.log("重置预测器参数到原始值"),console.log("原始表单数据:",M),Object.keys(s).forEach(o=>delete s[o]),Object.keys(M).forEach(o=>{s[o]=M[o]}),console.log("重置后的临时表单数据:",s),g.success("参数已重置")},oe=()=>{const o=m.name,e=o==="nav_predictor"?"nav_predictor":"predictor";console.log("当前路由名称:",o,"传递的 from 参数:",e),L.push({name:"lightningModel",query:{from:e}})},te=async(o,e="")=>{console.log("导出预测器算法配置，算法ID:",o,"subid:",e);try{const t=await A({id:o,subid:e,currentid:"003"}),l=JSON.stringify(t,null,4),a=new Blob([l],{type:"application/json"}),u=URL.createObjectURL(a),n=document.createElement("a");n.href=u,n.download=`predictor_config_${o}_${Date.now()}.json`,n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(u),console.log("预测器配置导出成功")}catch(t){g.error("导出预测器配置失败"),console.error("导出预测器配置失败:",t)}},ne=()=>{var e;if(!i.value){g.warning("请先选择算法");return}const o=((e=c.value)==null?void 0:e.id)||"";console.log("导出配置，使用的 subid:",o),te(i.value,o)};return(o,e)=>{const t=j("el-button"),l=j("el-option"),a=j("el-select");return b(),V("div",he,[N.value?(b(),V("div",_e,[y(t,{onClick:q},{default:h(()=>e[1]||(e[1]=[S("返回")])),_:1}),y(t,{type:"primary",onClick:D},{default:h(()=>e[2]||(e[2]=[S("保存配置")])),_:1}),y(t,{type:"success",onClick:H},{default:h(()=>e[3]||(e[3]=[S("开始优化")])),_:1}),y(t,{type:"primary",onClick:Q},{default:h(()=>e[4]||(e[4]=[S("完成配置")])),_:1})])):T("",!0),p("div",Se,[p("span",be,I(v.label),1),p("span",Le,I(v.description),1),p("div",Me,[e[5]||(e[5]=p("label",null,"选择优化算法",-1)),p("div",Ve,[y(a,{modelValue:i.value,"onUpdate:modelValue":e[0]||(e[0]=u=>i.value=u),placeholder:"请选择优化算法",onChange:B},{default:h(()=>[(b(!0),V(me,null,fe(v.algorithmVos,u=>(b(),pe(l,{key:u.id,label:u.name,value:u.id},null,8,["label","value"]))),128))]),_:1},8,["modelValue"])])]),c.value?(b(),V("div",Oe,[e[6]||(e[6]=p("label",null,"当前选中的 LightningModel 策略：",-1)),p("div",we,I(c.value.name),1)])):T("",!0)]),f.value?(b(),V("div",Ie,[p("div",Ne,[p("span",ke,"算法："+I(f.value.name),1),p("div",Ce,[y(t,{class:"export-button",type:"success",onClick:ne},{default:h(()=>e[7]||(e[7]=[S(" 导出配置 ")])),_:1}),y(t,{class:"lightning-button",type:"info",onClick:oe},{default:h(()=>e[8]||(e[8]=[S(" 设置LightningModel模块参数 ")])),_:1})])]),f.value.paramVos.length>0?(b(),V("div",De,[y(se,{ref_key:"paramListRef",ref:k,params:f.value.paramVos,"model-value":ue(C),refs:_,"onUpdate:modelValue":X,"onUpdate:refs":Y},null,8,["params","model-value","refs"]),p("div",Re,[y(t,{type:"primary",onClick:Z},{default:h(()=>e[9]||(e[9]=[S("保存")])),_:1}),y(t,{onClick:ee},{default:h(()=>e[10]||(e[10]=[S("重置")])),_:1})])])):(b(),V("div",Te,"该算法暂无参数设置"))])):T("",!0)])}}}),Fe=ve(je,[["__scopeId","data-v-48ca746f"]]);export{Fe as default};
