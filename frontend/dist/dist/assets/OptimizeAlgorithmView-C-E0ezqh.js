import{g as $,a as ae,u as ne,b as re}from"./module-CucKkFkR.js";import"./request-Bb7olHYx.js";import{P as ce}from"./ParamList-33aMWWOn.js";import{d as ie,M as B,I as ge,r as C,L as T,G as J,g as ue,x as G,c as I,z as R,a as m,b as p,w as S,f as q,t as N,u as me,E as g,k as b,F as de,n as fe,i as pe,o as h,N as ye,_ as ve}from"./index-CSkJ4Wth.js";import{M as H}from"./moduleConfig-DmJXzrbK.js";import"./index-xsH4HHeE.js";import"./auth-CnjZ6pwZ.js";const Se={class:"optimize-algorithm-view"},he={key:0,class:"global-actions"},_e={class:"card algorithm-selection-section"},Ve={class:"card-title"},Ie={class:"card-description"},be={class:"form-group"},De={style:{flex:"1"}},Oe={key:0,class:"form-group surrogate-strategy-display"},Ae={class:"strategy-value"},Te={key:1,class:"card algorithm-params-section"},Ne={class:"card-header"},ke={class:"card-title"},we={class:"header-actions"},Ee={key:0,class:"params-container"},Ce={class:"form-actions"},Re={key:1,class:"no-params"},qe=ie({__name:"OptimizeAlgorithmView",setup(xe){const y=ue(),n=ge(),k=B(()=>n.name==="nav_optimizeAlgorithm"),w=C(null),x=H.OPTIMIZATION_METHOD,z=H.SURROGATE_METHOD,f=T({name:"OptimizationMethod",label:"优化算法",description:"优化方法及其参数设置",algorithmVos:[]}),i=C(""),c=C(null),M=()=>{try{const o=localStorage.getItem("selectedSurrogateStrategy");if(o){const e=JSON.parse(o);c.value=e,console.log("从 localStorage 加载代理模型策略:",e)}}catch(o){console.error("加载代理模型策略失败:",o)}},O=o=>{try{o?(localStorage.setItem("selectedSurrogateStrategy",JSON.stringify(o)),console.log("保存代理模型策略到 localStorage:",o)):(localStorage.removeItem("selectedSurrogateStrategy"),console.log("从 localStorage 移除代理模型策略"))}catch(e){console.error("保存代理模型策略失败:",e)}},u=B(()=>f.algorithmVos.find(o=>o.id===i.value)||null),_=T({}),r=T({}),E=r,v=T({}),P=async()=>{try{console.log("正在加载算法列表，模块ID:",x);const o=await $({id:x});console.log("算法列表API响应:",o),f.algorithmVos=(o||[]).map(e=>({id:e.id,name:e.name,label:e.label,paramVos:[]})),console.log("处理后的算法列表:",f.algorithmVos),f.algorithmVos.length>0?(i.value=f.algorithmVos[0].id,console.log("选择的算法ID:",i.value),await L(i.value)):(console.log("没有找到算法列表"),g.warning("该模块下暂无算法配置"))}catch(o){g.error("获取优化算法列表失败"),console.error("获取优化算法列表失败:",o)}},L=async o=>{try{console.log("正在加载算法参数，算法ID:",o);const e=await ae({id:o});console.log("参数列表API响应:",e);const t=(e||[]).map(s=>({id:s.id,name:s.name,label:s.label,value:s.value,paramType:s.type==="str"?"string":s.type,paramDefault:s.defaultValue,paramOption:s.options?s.options.join(","):null,minValue:s.minValue,maxValue:s.maxValue,ref:null}));console.log("处理后的参数列表:",t);const l=f.algorithmVos.find(s=>s.id===o);l&&(l.paramVos=t,K(l),console.log("算法参数已更新，参数数量:",t.length))}catch(e){g.error("获取算法参数失败"),console.error("获取算法参数失败:",e)}},K=o=>{Object.keys(_).forEach(e=>delete _[e]),Object.keys(r).forEach(e=>delete r[e]),Object.keys(v).forEach(e=>delete v[e]),o&&o.paramVos.length>0&&o.paramVos.forEach(e=>{let t;e.paramType==="bool"?t=e.value==="true":e.paramType==="int"||e.paramType==="float"?t=Number(e.value):(e.paramType,t=e.value),_[e.name]=t,r[e.name]=t,e.ref&&(v[e.name]=e.ref??"")})},Z=async()=>{i.value&&await L(i.value)},Q=()=>{k.value?y.push({name:"nav_globalParam"}):y.back()},j=async()=>{try{const o=`optimizeAlgorithm_${String(n.name)}`,e={selectedAlgorithm:i.value,form:{...E},selectedSurrogateStrategy:c.value,timestamp:new Date().toISOString(),routeName:n.name};localStorage.setItem(o,JSON.stringify(e))}catch(o){console.error("保存配置失败:",o),g.error("保存配置失败")}},W=async()=>{try{await j(),await U(),g.success("配置已保存并导出，正在跳转到下一步"),y.push({name:"nav_predictor"})}catch(o){console.error("下一步操作失败:",o),g.error("操作失败，请重试")}},F=()=>{if(k.value)try{const o=`optimizeAlgorithm_${String(n.name)}`,e=localStorage.getItem(o);if(e){const t=JSON.parse(e);i.value=t.selectedAlgorithm,Object.assign(E,t.form),c.value=t.selectedSurrogateStrategy}}catch(o){console.error("加载配置失败:",o)}};J(async()=>{console.log("=== OptimizeAlgorithmView 组件挂载 ==="),console.log("当前路由:",n.name),console.log("路由查询参数:",n.query),F(),await P(),console.log("正在从 localStorage 加载代理模型策略..."),M(),console.log("加载后的 selectedSurrogateStrategy.value:",c.value);const o=n.query.surrogateStrategyId;if(o){console.log("=== 组件挂载时发现路由参数 surrogateStrategyId ==="),console.log("surrogateStrategyId:",o);const e=await A(String(o));if(console.log("获取到的策略名称:",e),e){const t={id:String(o),name:e};c.value=t,O(t),console.log("已更新选中的代理模型策略:",c.value),setTimeout(()=>{const l=n.name;console.log("清除路由参数，当前路由名称:",l),y.replace({name:l,query:{...n.query,surrogateStrategyId:void 0}})},100)}else console.log("未能获取到策略名称，策略ID:",o)}console.log("=== OptimizeAlgorithmView 组件挂载完成 ===")});const A=async o=>{try{console.log("=== 获取代理模型策略名称 ==="),console.log("正在获取代理模型策略名称，策略ID:",o),console.log("代理模型模块ID:",z);const e=await $({id:z});if(console.log("代理模型算法列表API响应:",e),console.log("响应数据类型:",typeof e),console.log("响应是否为数组:",Array.isArray(e)),!e||!Array.isArray(e))return console.log("API响应无效或不是数组"),null;console.log("搜索策略ID:",o,"在",e.length,"个策略中"),e.forEach((s,d)=>{console.log(`策略 ${d}:`,{id:s.id,name:s.name})});const t=e.find(s=>s.id===o);console.log("找到的策略:",t);const l=t?t.name:null;return console.log("返回的策略名称:",l),console.log("=== 获取代理模型策略名称结束 ==="),l}catch(e){return console.error("获取代理模型策略名称失败:",e),console.error("错误详情:",(e==null?void 0:e.response)||(e==null?void 0:e.message)||e),null}};G(()=>n.query.surrogateStrategyId,async o=>{if(console.log("=== 路由参数监听触发 ==="),console.log("当前路由名称:",n.name),console.log("接收到的 surrogateStrategyId:",o),console.log("newStrategyId 类型:",typeof o),console.log("当前选择的算法ID:",i.value),console.log("完整的路由查询参数:",n.query),o){console.log("开始处理代理模型策略 ID:",o);const e=await A(String(o));if(console.log("获取到的策略名称:",e),e){const t={id:String(o),name:e};c.value=t,O(t),console.log("已更新选中的代理模型策略:",c.value),setTimeout(()=>{const l=n.name;console.log("延迟清除路由参数，当前路由名称:",l),y.replace({name:l,query:{...n.query,surrogateStrategyId:void 0}})},100)}else console.log("未能获取到策略名称，策略ID:",o)}else console.log("没有接收到有效的策略ID");console.log("=== 路由参数监听结束 ===")});const X=o=>{console.log("=== 父组件接收到表单更新 ==="),console.log("新的表单数据:",o),console.log("更新前的 tempForm:",{...r}),Object.keys(r).forEach(e=>delete r[e]),Object.assign(r,o),console.log("更新后的 tempForm:",{...r}),console.log("=== 表单更新完成 ===")},Y=o=>{console.log("=== 父组件接收到引用更新 ==="),console.log("新的引用数据:",o),Object.keys(v).forEach(e=>delete v[e]),Object.assign(v,o),console.log("更新后的 formRefs:",{...v}),console.log("=== 引用更新完成 ===")},ee=async()=>{var o,e,t;if(console.log("=== 开始保存参数 ==="),console.log("当前选择的算法ID:",i.value),console.log("当前算法对象:",u.value),!u.value||u.value.paramVos.length===0){g.success("当前算法无参数需要保存");return}w.value&&(console.log("调用 commitLocalData 前的 tempForm:",{...r}),w.value.commitLocalData(),console.log("调用 commitLocalData 后的 tempForm:",{...r})),await ye(),console.log("验证前的最终 tempForm 数据:",r);for(const l of u.value.paramVos){const s=r[l.name];if(console.log(`验证参数 ${l.name}:`,s,"类型:",typeof s),(l.paramType==="int"||l.paramType==="float")&&(s==null||s===""||Number(s)<=0)){g.error(`${l.label} 必须为正数`);return}if(l.minValue!==null&&Number(s)<l.minValue){g.error(`${l.label} 不能小于 ${l.minValue}`);return}}try{console.log("开始保存参数到数据库...");const l=u.value.paramVos.map(a=>{const V=r[a.name];let D;a.paramType==="bool"||a.paramType==="int"||a.paramType,D=String(V);const se={id:a.id,algorithmId:i.value,name:a.name,label:a.label,value:D,paramType:a.paramType,paramDefault:a.paramDefault||"",paramOption:a.paramOption||"",minValue:a.minValue?String(a.minValue):"",maxValue:a.maxValue?String(a.maxValue):"",type:"edit"};return console.log("准备更新参数:",a.name,"值:",D),ne(se,{silent:!0})}),d=(await Promise.allSettled(l)).filter(a=>a.status==="rejected");if(d.length>0)throw d[0].reason;console.log("所有参数保存成功"),u.value&&u.value.paramVos&&u.value.paramVos.forEach(a=>{const V=r[a.name];a.paramType==="bool"||a.paramType==="int"||a.paramType,a.value=String(V),_[a.name]=r[a.name]}),g.success("所有参数保存成功")}catch(l){console.error("参数保存失败，详细错误:",l),console.error("错误响应:",l==null?void 0:l.response),console.error("错误数据:",(o=l==null?void 0:l.response)==null?void 0:o.data),g.error(`参数保存失败: ${((t=(e=l==null?void 0:l.response)==null?void 0:e.data)==null?void 0:t.message)||(l==null?void 0:l.message)||"未知错误"}`)}},oe=()=>{console.log("重置参数到原始值"),console.log("原始表单数据:",_),Object.keys(r).forEach(o=>delete r[o]),Object.keys(_).forEach(o=>{r[o]=_[o]}),console.log("重置后的临时表单数据:",r),g.success("参数已重置")},le=()=>{const e=n.name==="nav_optimizeAlgorithm"?"nav_optimizeAlgorithm":"optimizeAlgorithm";y.push({name:"surrogate",query:{from:e}})},te=async(o,e="")=>{console.log("导出算法配置，算法ID:",o,"subid:",e);try{const t=await re({id:o,subid:e,currentid:"001"});console.log("系统算法配置已保存到后端:",t)}catch(t){console.error("保存系统算法配置失败:",t)}},U=()=>{if(console.log("=== 手动导出配置函数调用 ==="),console.log("selectedAlgorithm.value:",i.value),console.log("selectedSurrogateStrategy.value:",c.value),!i.value){console.log("算法未选择，显示警告"),g.warning("请先选择一个算法");return}if(!c.value){console.log("代理模型策略未选择，显示警告"),g.warning("请先选择代理模型策略才能导出配置");return}console.log("准备导出配置，算法ID:",i.value,"策略ID:",c.value.id),te(i.value,c.value.id),console.log("=== 手动导出配置函数结束 ===")};return J(async()=>{console.log("=== OptimizeAlgorithmView 组件挂载 ==="),console.log("当前路由:",n.name),console.log("路由查询参数:",n.query),F(),await P(),console.log("正在从 localStorage 加载代理模型策略..."),M(),console.log("加载后的 selectedSurrogateStrategy.value:",c.value);const o=n.query.surrogateStrategyId;if(o){console.log("=== 组件挂载时发现路由参数 surrogateStrategyId ==="),console.log("surrogateStrategyId:",o);const e=await A(String(o));if(console.log("获取到的策略名称:",e),e){const t={id:String(o),name:e};c.value=t,O(t),console.log("已更新选中的代理模型策略:",c.value),setTimeout(()=>{const l=n.name;console.log("清除路由参数，当前路由名称:",l),y.replace({name:l,query:{...n.query,surrogateStrategyId:void 0}})},100)}else console.log("未能获取到策略名称，策略ID:",o)}console.log("=== OptimizeAlgorithmView 组件挂载完成 ===")}),G(()=>n.query.surrogateStrategyId,async o=>{if(console.log("=== 路由参数监听触发 ==="),console.log("当前路由名称:",n.name),console.log("接收到的 surrogateStrategyId:",o),console.log("newStrategyId 类型:",typeof o),console.log("当前选择的算法ID:",i.value),console.log("完整的路由查询参数:",n.query),o){console.log("开始处理代理模型策略 ID:",o);const e=await A(String(o));if(console.log("获取到的策略名称:",e),e){const t={id:String(o),name:e};c.value=t,O(t),console.log("已更新选中的代理模型策略:",c.value),setTimeout(()=>{const l=n.name;console.log("延迟清除路由参数，当前路由名称:",l),y.replace({name:l,query:{...n.query,surrogateStrategyId:void 0}})},100)}else console.log("未能获取到策略名称，策略ID:",o)}else console.log("没有接收到有效的策略ID");console.log("=== 路由参数监听结束 ===")}),(o,e)=>{const t=q("el-button"),l=q("el-option"),s=q("el-select");return h(),I("div",Se,[k.value?(h(),I("div",he,[p(t,{onClick:Q},{default:S(()=>e[1]||(e[1]=[b("返回")])),_:1}),p(t,{type:"primary",onClick:j},{default:S(()=>e[2]||(e[2]=[b("保存配置")])),_:1}),p(t,{type:"primary",onClick:W},{default:S(()=>e[3]||(e[3]=[b("下一步")])),_:1})])):R("",!0),m("div",_e,[m("span",Ve,N(f.label),1),m("span",Ie,N(f.description),1),m("div",be,[e[4]||(e[4]=m("label",null,"选择优化算法",-1)),m("div",De,[p(s,{modelValue:i.value,"onUpdate:modelValue":e[0]||(e[0]=d=>i.value=d),placeholder:"请选择优化算法",onChange:Z},{default:S(()=>[(h(!0),I(de,null,fe(f.algorithmVos,d=>(h(),pe(l,{key:d.id,label:d.name,value:d.id},null,8,["label","value"]))),128))]),_:1},8,["modelValue"])])]),c.value?(h(),I("div",Oe,[e[5]||(e[5]=m("label",null,"当前选中的代理模型策略：",-1)),m("div",Ae,N(c.value.name),1)])):R("",!0)]),u.value?(h(),I("div",Te,[m("div",Ne,[m("span",ke,"算法："+N(u.value.name),1),m("div",we,[p(t,{type:"success",onClick:U},{default:S(()=>e[6]||(e[6]=[b("导出配置")])),_:1}),p(t,{class:"surrogate-button",type:"info",onClick:le},{default:S(()=>e[7]||(e[7]=[b(" 设置SurrogateMethod模块参数 ")])),_:1})])]),u.value.paramVos.length>0?(h(),I("div",Ee,[p(ce,{ref_key:"paramListRef",ref:w,params:u.value.paramVos,"model-value":me(E),refs:v,"onUpdate:modelValue":X,"onUpdate:refs":Y},null,8,["params","model-value","refs"]),m("div",Ce,[p(t,{type:"primary",onClick:ee},{default:S(()=>e[8]||(e[8]=[b("保存")])),_:1}),p(t,{onClick:oe},{default:S(()=>e[9]||(e[9]=[b("重置")])),_:1})])])):(h(),I("div",Re,"该算法暂无参数设置"))])):R("",!0)])}}}),$e=ve(qe,[["__scopeId","data-v-2b2407e0"]]);export{$e as default};
