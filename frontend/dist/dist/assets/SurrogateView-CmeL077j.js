import{g as B,a as $,u as q}from"./module-CucKkFkR.js";import{P as G}from"./ParamList-33aMWWOn.js";import{d as H,r as L,L as S,M as J,G as K,c as V,a as c,z as Q,b as _,t as w,w as k,f as O,u as W,E as u,k as R,F as X,n as Y,i as Z,g as ee,I as oe,o as h,N as le,_ as te}from"./index-CSkJ4Wth.js";import{M as se}from"./moduleConfig-DmJXzrbK.js";import"./request-Bb7olHYx.js";import"./index-xsH4HHeE.js";import"./auth-CnjZ6pwZ.js";const ae={class:"surrogate-view"},ne={class:"card strategy-selection-section"},re={class:"card-header"},ie={class:"card-title"},ce={class:"form-group"},ue={style:{flex:"1"}},me={key:0,class:"card strategy-params-section"},de={class:"card-header"},ge={class:"card-title"},fe={key:0,class:"params-container"},pe={class:"form-actions"},ve={key:1,class:"no-params"},he=H({__name:"SurrogateView",setup(ye){const b=ee(),T=oe(),E=L(null),D=se.SURROGATE_METHOD,m=S({name:"SurrogateMethod",label:"代理模型",description:"代理模型方法及其参数设置",algorithmVos:[]}),r=L(""),i=J(()=>m.algorithmVos.find(o=>o.id===r.value)||null),f=S({}),a=S({}),x=a,d=S({}),j=async()=>{try{console.log("正在加载代理模型算法列表，模块ID:",D);const o=await B({id:D});console.log("代理模型算法列表API响应:",o),m.algorithmVos=(o||[]).map(e=>({id:e.id,name:e.name,label:e.label,paramVos:[]})),console.log("处理后的代理模型算法列表:",m.algorithmVos),m.algorithmVos.length>0?(r.value=m.algorithmVos[0].id,console.log("选择的代理模型算法ID:",r.value),await A(r.value)):(console.log("没有找到代理模型算法列表"),u.warning("该模块下暂无算法配置"))}catch(o){u.error("获取代理模型算法列表失败"),console.error("获取代理模型算法列表失败:",o)}},A=async o=>{try{console.log("正在加载代理模型算法参数，算法ID:",o);const e=await $({id:o});console.log("代理模型参数列表API响应:",e);const n=(e||[]).map(s=>({id:s.id,name:s.name,label:s.label,value:s.value,paramType:s.type,paramDefault:s.defaultValue,paramOption:s.options?s.options.join(","):null,minValue:s.minValue,maxValue:s.maxValue,ref:null}));console.log("处理后的代理模型参数列表:",n);const l=m.algorithmVos.find(s=>s.id===o);l&&(l.paramVos=n,I(l),console.log("代理模型算法参数已更新，参数数量:",n.length))}catch(e){u.error("获取代理模型算法参数失败"),console.error("获取代理模型算法参数失败:",e)}},I=o=>{Object.keys(f).forEach(e=>delete f[e]),Object.keys(a).forEach(e=>delete a[e]),Object.keys(d).forEach(e=>delete d[e]),o&&o.paramVos.length>0&&o.paramVos.forEach(e=>{let n;e.paramType==="bool"?n=e.value==="true":e.paramType==="int"||e.paramType==="float"?n=Number(e.value):n=e.value,f[e.name]=n,a[e.name]=n,e.ref&&(d[e.name]=e.ref??"")})},F=async()=>{r.value&&await A(r.value)};K(()=>{j()});const C=o=>{console.log("=== 代理模型父组件接收到表单更新 ==="),console.log("新的表单数据:",o),console.log("更新前的 tempForm:",{...a}),Object.keys(a).forEach(e=>delete a[e]),Object.assign(a,o),console.log("更新后的 tempForm:",{...a}),console.log("=== 代理模型表单更新完成 ===")},P=o=>{console.log("=== 代理模型父组件接收到引用更新 ==="),console.log("新的引用数据:",o),Object.keys(d).forEach(e=>delete d[e]),Object.assign(d,o),console.log("更新后的 formRefs:",{...d}),console.log("=== 代理模型引用更新完成 ===")},U=async()=>{var o,e,n;if(console.log("=== 开始保存代理模型参数 ==="),console.log("当前选择的策略ID:",r.value),console.log("当前策略对象:",i.value),!i.value||i.value.paramVos.length===0){u.success("当前策略无参数需要保存");return}E.value&&(console.log("调用 commitLocalData 前的 tempForm:",{...a}),E.value.commitLocalData(),console.log("调用 commitLocalData 后的 tempForm:",{...a})),await le(),console.log("验证前的最终 tempForm 数据:",a);for(const l of i.value.paramVos){const s=a[l.name];if(console.log(`验证代理模型参数 ${l.name}:`,s,"类型:",typeof s),(l.paramType==="int"||l.paramType==="float")&&(s==null||s===""||Number(s)<=0)){u.error(`${l.label} 必须为正数`);return}if(l.minValue!==null&&Number(s)<l.minValue){u.error(`${l.label} 不能小于 ${l.minValue}`);return}}try{console.log("开始保存代理模型参数到数据库...");const l=i.value.paramVos.map(t=>{const v=a[t.name];let y;t.paramType==="bool"||t.paramType==="int"||t.paramType,y=String(v);const N={id:t.id,algorithmId:r.value,name:t.name,label:t.label,value:y,paramType:t.paramType,paramDefault:t.paramDefault||"",paramOption:t.paramOption||"",minValue:t.minValue?String(t.minValue):"",maxValue:t.maxValue?String(t.maxValue):"",type:"edit"};return console.log("准备更新代理模型参数:",t.name,"值:",y),q(N,{silent:!0})}),g=(await Promise.allSettled(l)).filter(t=>t.status==="rejected");if(g.length>0)throw g[0].reason;console.log("所有代理模型参数保存成功"),i.value&&i.value.paramVos&&i.value.paramVos.forEach(t=>{const v=a[t.name];t.paramType==="bool"||t.paramType==="int"||t.paramType,t.value=String(v),f[t.name]=a[t.name]}),u.success("所有参数保存成功");const p=T.query.from;if(console.log("=== 保存成功后的返回逻辑 ==="),console.log("fromRoute:",p),console.log("selectedStrategy.value:",r.value),console.log("当前路由查询参数:",T.query),(p==="optimizeAlgorithm"||p==="nav_optimizeAlgorithm")&&r.value){console.log("来自 OptimizeAlgorithmView，准备传回仿真策略 ID:",r.value),console.log("目标路由名称:",p);const t={name:p,query:{surrogateStrategyId:r.value}};console.log("准备跳转到:",t),b.replace(t)}else console.log("不满足返回条件，执行正常返回"),console.log("fromRoute 匹配:",p==="optimizeAlgorithm"||p==="nav_optimizeAlgorithm"),console.log("selectedStrategy.value 存在:",!!r.value),b.back();console.log("=== 返回逻辑结束 ===")}catch(l){console.error("代理模型参数保存失败，详细错误:",l),console.error("错误响应:",l==null?void 0:l.response),console.error("错误数据:",(o=l==null?void 0:l.response)==null?void 0:o.data),u.error(`参数保存失败: ${((n=(e=l==null?void 0:l.response)==null?void 0:e.data)==null?void 0:n.message)||(l==null?void 0:l.message)||"未知错误"}`)}},z=()=>{console.log("重置代理模型参数到原始值"),console.log("原始表单数据:",f),Object.keys(a).forEach(o=>delete a[o]),Object.keys(f).forEach(o=>{a[o]=f[o]}),console.log("重置后的临时表单数据:",a),u.success("参数已重置")},M=()=>{const o=T.query.from;o==="optimizeAlgorithm"||o==="nav_optimizeAlgorithm"?b.push({name:o}):b.back()};return(o,e)=>{const n=O("el-button"),l=O("el-option"),s=O("el-select");return h(),V("div",ae,[c("div",ne,[c("div",re,[c("span",ie,w(m.label),1),_(n,{class:"back-button",type:"info",onClick:M},{default:k(()=>e[1]||(e[1]=[R("返回")])),_:1})]),e[3]||(e[3]=c("span",{class:"card-description"},"选择适合的仿真策略以优化性能",-1)),c("div",ce,[e[2]||(e[2]=c("label",null,"选择仿真策略",-1)),c("div",ue,[_(s,{modelValue:r.value,"onUpdate:modelValue":e[0]||(e[0]=g=>r.value=g),placeholder:"请选择优化算法",onChange:F},{default:k(()=>[(h(!0),V(X,null,Y(m.algorithmVos,g=>(h(),Z(l,{key:g.id,label:g.name,value:g.id},null,8,["label","value"]))),128))]),_:1},8,["modelValue"])])])]),i.value?(h(),V("div",me,[c("div",de,[c("span",ge,"策略："+w(i.value.name),1)]),i.value.paramVos.length>0?(h(),V("div",fe,[_(G,{ref_key:"paramListRef",ref:E,params:i.value.paramVos,"model-value":W(x),refs:d,"onUpdate:modelValue":C,"onUpdate:refs":P},null,8,["params","model-value","refs"]),c("div",pe,[_(n,{type:"primary",onClick:U},{default:k(()=>e[4]||(e[4]=[R("保存")])),_:1}),_(n,{onClick:z},{default:k(()=>e[5]||(e[5]=[R("重置")])),_:1})])])):(h(),V("div",ve,"该策略暂无参数设置"))])):Q("",!0)])}}}),Oe=te(he,[["__scopeId","data-v-857d52e2"]]);export{Oe as default};
