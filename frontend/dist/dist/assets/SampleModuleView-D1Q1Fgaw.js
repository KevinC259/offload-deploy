import{g as Z,a as ee,u as ae,b as M}from"./module-CucKkFkR.js";import{P as le}from"./ParamList-33aMWWOn.js";import{d as oe,r as x,L as O,M as te,G as ne,c as _,a as g,z as S,t as k,b as m,w as f,f as D,E as c,F as se,n as re,i as ie,k as v,g as ue,I as me,o as V,N as ce,_ as pe}from"./index-CSkJ4Wth.js";import"./request-Bb7olHYx.js";import"./index-xsH4HHeE.js";import"./auth-CnjZ6pwZ.js";const L={algorithmVos:[{id:"sample_001",name:"StandardSampler",label:"标准采样器",paramVos:[{id:"s001",name:"initial_sample_number",label:"初始样本量",value:"100",paramType:"int",paramDefault:"100",paramOption:null,minValue:1,maxValue:1e4,ref:null},{id:"s002",name:"samples_per_generation",label:"每轮优化样本量",value:"10",paramType:"int",paramDefault:"10",paramOption:null,minValue:1,maxValue:1e3,ref:null},{id:"s003",name:"resample_num",label:"单次筛选样本量",value:"200",paramType:"int",paramDefault:"200",paramOption:null,minValue:1,maxValue:1e4,ref:null},{id:"s004",name:"update_sampler_per_rounds",label:"采样器优化周期",value:"5",paramType:"int",paramDefault:"5",paramOption:null,minValue:1,maxValue:100,ref:null},{id:"s005",name:"force_update_sampler_rounds",label:"强制优化采样器轮次",value:"1,2,3",paramType:"str",paramDefault:"1,2,3",paramOption:null,minValue:null,maxValue:null,ref:null},{id:"s006",name:"n_mat_pool",label:"筛选缓冲区大小",value:"20000",paramType:"int",paramDefault:"20000",paramOption:null,minValue:1e3,maxValue:1e5,ref:null},{id:"s007",name:"using_known_initial_point",label:"从较优点开始采样",value:"false",paramType:"bool",paramDefault:"false",paramOption:null,minValue:null,maxValue:null,ref:null}]},{id:"sample_002",name:"AdaptiveSampler",label:"自适应采样器",paramVos:[{id:"s101",name:"initial_sample_number",label:"初始样本量",value:"150",paramType:"int",paramDefault:"150",paramOption:null,minValue:1,maxValue:1e4,ref:null},{id:"s102",name:"samples_per_generation",label:"每轮优化样本量",value:"15",paramType:"int",paramDefault:"15",paramOption:null,minValue:1,maxValue:1e3,ref:null},{id:"s103",name:"adapt_weight_smooth_coeff",label:"自适应权重光滑系数",value:"0.5",paramType:"float",paramDefault:"0.5",paramOption:null,minValue:0,maxValue:1,ref:null},{id:"s104",name:"using_adapt_weight",label:"启用自适应权重功能",value:"true",paramType:"bool",paramDefault:"true",paramOption:null,minValue:null,maxValue:null,ref:null},{id:"s105",name:"adapt_weight_min_weight_prop",label:"自适应权重权重均匀度",value:"0.0001",paramType:"float",paramDefault:"0.0001",paramOption:null,minValue:0,maxValue:1,ref:null}]},{id:"sample_003",name:"LocalOptimizationSampler",label:"局部优化采样器",paramVos:[{id:"s201",name:"neighbour_num",label:"每次探索区域数量",value:"3",paramType:"int",paramDefault:"3",paramOption:null,minValue:1,maxValue:20,ref:null},{id:"s202",name:"neighbour_size",label:"区域样本容量",value:"10",paramType:"int",paramDefault:"10",paramOption:null,minValue:1,maxValue:100,ref:null},{id:"s203",name:"neighbour_lifelong",label:"区域可容忍无改进次数",value:"20",paramType:"int",paramDefault:"20",paramOption:null,minValue:1,maxValue:100,ref:null},{id:"s204",name:"LDI_0_coeff",label:"同区域样本相似度",value:"0.1",paramType:"float",paramDefault:"0.1",paramOption:null,minValue:0,maxValue:1,ref:null}]}]},de={class:"optimize-algorithm-view"},fe={class:"card algorithm-selection-section"},ge={class:"card-title"},ve={class:"card-description"},Ve={class:"form-group"},_e={style:{flex:"1"}},be={key:0,class:"card algorithm-params-section"},ye={key:0,class:"card layer-section"},he={class:"card-header"},we={class:"card-title"},xe={class:"header-actions"},De={key:1,class:"params-container"},Te={class:"form-actions"},Oe={key:2,class:"no-params"},ke={key:1,class:"global-actions"},C="2a508fe0342a4cc5802927fb02ab0602",Se=oe({__name:"SampleModuleView",setup(Le){const j=ue();me();const T=x(null),b=x([]),N=x(1),p=O({name:"SampleModule",label:"采样模块",description:"采样方法及其参数设置",algorithmVos:[]}),r=x(""),d=te(()=>p.algorithmVos.find(a=>a.id===r.value)||null),w=O({}),s=O({}),y=O({}),U=async()=>{try{console.log("正在加载采样算法列表，模块ID:",C);const a=await Z({id:C});console.log("采样算法列表API响应:",a),p.algorithmVos=(a||[]).map(e=>({id:e.id,name:e.name,label:e.label,paramVos:[]})),console.log("处理后的采样算法列表:",p.algorithmVos),p.algorithmVos.length>0?(r.value=p.algorithmVos[0].id,console.log("选择的采样算法ID:",r.value),await F(r.value)):(console.log("没有找到采样算法列表"),c.warning("该模块下暂无算法配置"))}catch(a){c.error("获取采样算法列表失败"),console.error("获取采样算法列表失败:",a),A()}},F=async a=>{try{console.log("正在加载采样算法参数，算法ID:",a);const e=await ee({id:a});console.log("采样参数列表API响应:",e);const n=(e||[]).map(l=>({id:l.id,name:l.name,label:l.label,value:String(l.value||""),paramType:l.type==="str"?"string":l.type,paramDefault:String(l.defaultValue||""),paramOption:l.options?l.options.join(","):null,minValue:l.minValue!==void 0?l.minValue:null,maxValue:l.maxValue!==void 0?l.maxValue:null,ref:null}));console.log("处理后的采样参数列表:",n);const o=p.algorithmVos.find(l=>l.id===a);o&&(o.paramVos=n,E(o),console.log("采样算法参数已更新，参数数量:",n.length))}catch(e){c.error("获取采样算法参数失败"),console.error("获取采样算法参数失败:",e)}},A=()=>{if(console.log("使用静态数据初始化采样模块"),L&&L.algorithmVos&&(p.algorithmVos=L.algorithmVos.map(a=>({id:a.id,name:a.name,label:a.label,paramVos:a.paramVos||[]})),p.algorithmVos.length>0)){r.value=p.algorithmVos[0].id;const a=p.algorithmVos[0];E(a)}},E=a=>{Object.keys(w).forEach(e=>delete w[e]),Object.keys(s).forEach(e=>delete s[e]),Object.keys(y).forEach(e=>delete y[e]),a&&a.paramVos.length>0&&a.paramVos.forEach(e=>{let n;e.paramType==="bool"?n=e.value==="true":e.paramType==="int"?n=parseInt(e.value):e.paramType==="float"?n=parseFloat(e.value):(e.paramType,n=e.value),w[e.name]=n,s[e.name]=n,e.ref&&(y[e.name]=e.ref)})},P=async()=>{r.value&&await F(r.value)},$=a=>{Object.keys(s).forEach(e=>delete s[e]),Object.assign(s,a),console.log("表单数据更新:",{...s})},B=a=>{Object.assign(y,a),console.log("引用数据更新:",y)},R=async()=>{var a,e,n;if(console.log("=== 开始保存参数 ==="),console.log("当前选择的算法ID:",r.value),console.log("当前算法对象:",d.value),!d.value||d.value.paramVos.length===0){c.success("当前算法无参数需要保存");return}if(T.value){console.log("调用 commitLocalData 前的 tempForm:",{...s}),await T.value.commitLocalData(),await ce();const{form:o}=await T.value.getLocalFormData();Object.assign(s,o),console.log("获取最新表单数据后的 tempForm:",{...s})}console.log("验证前的最终 tempForm 数据:",s);for(const o of d.value.paramVos){const l=s[o.name];if(console.log(`验证参数 ${o.name}:`,l,"类型:",typeof l),(o.paramType==="int"||o.paramType==="float")&&(l==null||l===""||Number(l)<=0)){c.error(`${o.label} 必须为正数`);return}if(o.minValue!==null&&Number(l)<o.minValue){c.error(`${o.label} 不能小于 ${o.minValue}`);return}}try{console.log("开始保存参数到数据库...");const o=d.value.paramVos.map(t=>{const u=s[t.name];let h;t.paramType==="bool"||t.paramType==="int"||t.paramType,h=String(u);const Y={id:t.id,algorithmId:r.value,name:t.name,label:t.label,value:h,paramType:t.paramType,paramDefault:t.paramDefault||"",paramOption:t.paramOption||"",minValue:t.minValue?String(t.minValue):"",maxValue:t.maxValue?String(t.maxValue):"",type:"edit"};return console.log("准备更新参数:",t.name,"值:",h),ae(Y,{silent:!0})}),i=(await Promise.allSettled(o)).filter(t=>t.status==="rejected");if(i.length>0)throw i[0].reason;console.log("所有参数保存成功"),d.value&&d.value.paramVos&&d.value.paramVos.forEach(t=>{const u=s[t.name];t.paramType==="bool"||t.paramType==="int"||t.paramType,t.value=String(u),w[t.name]=s[t.name]}),c.success("所有参数保存成功")}catch(o){console.error("参数保存失败，详细错误:",o),console.error("错误响应:",o==null?void 0:o.response),console.error("错误数据:",(a=o==null?void 0:o.response)==null?void 0:a.data),c.error(`参数保存失败: ${((n=(e=o==null?void 0:o.response)==null?void 0:e.data)==null?void 0:n.message)||(o==null?void 0:o.message)||"未知错误"}`)}},J=()=>{console.log("重置采样配置"),Object.assign(s,w),c.info("已重置为原始配置")},z=async a=>{console.log("导出算法配置，算法ID:",a);try{const e=await M({id:a,subid:"",currentid:"2a508fe0342a4cc5802927fb02ab0602"}),n=JSON.stringify(e,null,4),o=new Blob([n],{type:"application/json"}),l=URL.createObjectURL(o),i=document.createElement("a");i.href=l,i.download=`sample_module_config_${a}.json`,document.body.appendChild(i),i.click(),document.body.removeChild(i),URL.revokeObjectURL(l),c.success("算法配置已导出为JSON文件")}catch(e){console.error("导出算法配置失败:",e),c.error("导出配置失败")}},G=()=>{if(console.log("=== 导出配置函数调用 ==="),console.log("selectedAlgorithm.value:",r.value),!r.value){console.log("算法未选择，显示警告"),c.warning("请先选择一个算法");return}console.log("准备导出配置，算法ID:",r.value),z(r.value),console.log("=== 导出配置函数结束 ===")},q=()=>{const a=Number(s.min_vertices||0),e=Number(s.max_vertices||0),n={id:N.value++,layerType:"图层"+b.value.length,minVertices:a,maxVertices:e,targetFragment:s.target_fragment||""};b.value.push(n),c.success("新增图层成功")},H=a=>{const e=b.value.findIndex(n=>n.id===a);e!==-1&&(b.value.splice(e,1),c.success("图层删除成功"))},K=x(!0),Q=async()=>{try{if(!r.value)throw new Error("请先选择一个算法");const a=await M({id:r.value,subid:"",currentid:"2a508fe0342a4cc5802927fb02ab0602"}),e=JSON.stringify(a,null,4),n=new Blob([e],{type:"application/json"}),o=URL.createObjectURL(n),l=document.createElement("a");l.href=o,l.download=`sample_module_config_${r.value}.json`,document.body.appendChild(l),l.click(),document.body.removeChild(l),URL.revokeObjectURL(o)}catch(a){throw console.error("导出配置失败:",a),a}},I=async()=>{try{await R()}catch(a){throw console.error("保存配置失败:",a),a}},W=()=>{j.back()},X=async()=>{try{await I(),await Q(),c.success("配置已保存并导出，正在跳转到下一步"),j.push({name:"nav_globalParam"})}catch(a){console.error("下一步操作失败:",a),c.error("操作失败，请重试")}};return ne(async()=>{console.log("=== SampleModuleView 组件挂载 ==="),console.log("采样模块ID:",C),await U(),console.log("=== SampleModuleView 组件挂载完成 ===")}),(a,e)=>{const n=D("el-option"),o=D("el-select"),l=D("el-table-column"),i=D("el-button"),t=D("el-table");return V(),_("div",de,[g("div",fe,[g("span",ge,k(p.label),1),g("span",ve,k(p.description),1),g("div",Ve,[e[1]||(e[1]=g("label",null,"选择采样算法",-1)),g("div",_e,[m(o,{modelValue:r.value,"onUpdate:modelValue":e[0]||(e[0]=u=>r.value=u),placeholder:"请选择采样算法",onChange:P},{default:f(()=>[(V(!0),_(se,null,re(p.algorithmVos,u=>(V(),ie(n,{key:u.id,label:u.name,value:u.id},null,8,["label","value"]))),128))]),_:1},8,["modelValue"])])])]),d.value?(V(),_("div",be,[b.value.length>0?(V(),_("div",ye,[e[3]||(e[3]=g("span",{class:"card-title"},"图层列表",-1)),m(t,{data:b.value,style:{width:"100%"}},{default:f(()=>[m(l,{label:"序号",width:"80"},{default:f(u=>[v(k(u.$index+1),1)]),_:1}),m(l,{prop:"layerType",label:"Layer Type"}),m(l,{prop:"minVertices",label:"Min Vertices"}),m(l,{prop:"maxVertices",label:"Max Vertices"}),m(l,{prop:"targetFragment",label:"Target Fragment"}),m(l,{label:"操作",width:"120"},{default:f(u=>[m(i,{type:"danger",size:"small",onClick:h=>H(u.row.id)},{default:f(()=>e[2]||(e[2]=[v("删除")])),_:2},1032,["onClick"])]),_:1})]),_:1},8,["data"])])):S("",!0),g("div",he,[g("span",we,"算法："+k(d.value.name),1),g("div",xe,[m(i,{type:"success",onClick:G},{default:f(()=>e[4]||(e[4]=[v("导出配置")])),_:1}),m(i,{type:"primary",onClick:q},{default:f(()=>e[5]||(e[5]=[v("新增图层")])),_:1})])]),d.value.paramVos.length>0?(V(),_("div",De,[m(le,{ref_key:"paramListRef",ref:T,params:d.value.paramVos,"model-value":s,refs:y,"onUpdate:modelValue":$,"onUpdate:refs":B},null,8,["params","model-value","refs"]),g("div",Te,[m(i,{type:"primary",onClick:R},{default:f(()=>e[6]||(e[6]=[v("保存")])),_:1}),m(i,{onClick:J},{default:f(()=>e[7]||(e[7]=[v("重置")])),_:1})])])):(V(),_("div",Oe,"该算法暂无参数设置"))])):S("",!0),K.value?(V(),_("div",ke,[m(i,{onClick:W},{default:f(()=>e[8]||(e[8]=[v("返回")])),_:1}),m(i,{type:"primary",onClick:I},{default:f(()=>e[9]||(e[9]=[v("保存配置")])),_:1}),m(i,{type:"primary",onClick:X},{default:f(()=>e[10]||(e[10]=[v("下一步")])),_:1})])):S("",!0)])}}}),Me=pe(Se,[["__scopeId","data-v-8828c8e0"]]);export{Me as default};
